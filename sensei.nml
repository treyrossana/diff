&PROJECT
 JOB_NAME="grid1",
 FLOW_EQN="rans",
 USE_WELL_POSED_VISCOUS_BC=F,
 IS_AXISYMMETRIC=F,
 DESIRED_PRIMAL_ORDER=2,
 TEMPORAL_ORDER=1,
 VERBOSE_LEVEL=1,
 PRIMAL_RESTART=F,
 RESTART_LIMITERS=F,
 RESTART_WALL_DISTANCE=F,
 RESTART_SAVE_FREQ=-1,
 RESIDUAL_PRINT_FREQ=1,
 SOLN_SAVE_FREQ=500,
 SYSTEM_OUT_FREQ=-1,
 FORCE_OUT_FREQ=-1,
 WRITE_FINAL_SOLN=T,
 RECONSTRUCT_SOLN=F,
 SHOW_PHYS_CHECK_INFO=T,
 OUTPUT_YPLUS=F,
 PRINT_WALL_DISTANCE_OUTPUT=T,
 SYMMETRY_K_RESTART=F,
 /
&GRID
 RST_INPUT_FMT="ascii",
 RST_OUTPUT_FMT="ascii",
 /
&REFERENCE
 DIMENSIONAL=F,
 L_REF=  1.0000000000000000     ,
 L_REF_GRID=  0.01000000000000000     ,
 RHO_REF= 0.0242     ,
 A_REF=  179.3031   ,
 T_REF=  80.0     ,
 VMAG_REF=  1274.8     ,
 /
&FLUID
 GAMMA=  1.4     ,
 PR= 0.71     ,
 PR_T= 0.9    ,
 MOL_WEIGHT=  28.97     ,
 MU=  1.7893E-5,
 VISCOSITY_LAW="sutherlands",
 /
&FLUX
 HIGHER_ORDER_SCHEME="muscl",
 FLUX_SCHEME="vanleer",
 KAPPA=-1.0000000000000000     ,
 KAPPA_ERR= -1.0000000000000000     ,
 FLUX_LIM="michalak",
 FREEZE_MEAN_LIM=2500         ,
 FREEZE_TURB_LIM=2500    ,
 MEAN_NO_LIM=F,
 TURB_NO_LIM=F,
 TURB_1ST_ORDER=F,
 /
&ITERATIVE_SOLVER
 WHICH_ITERATIVE_SOLVER="gmres",
 ! 'N_ITERATIONS': number of iterations in GMRES (number of Krylov vectors)
 !                 larger number will generally improve the linear solver robustness,
 !                 at the expense of higher computational cost per iteration
 ! 'RESTART'     : number of restarts for the GMRES solver
 !                 if the solver tolerance is not reached after N_ITERATIONS, the
 !                 solver is restarted with an improved initial guess
 !                 (potentially allows for convergence without too large N_ITERATIONS)
 ! feel free to mess around with these for your specific problem
 N_ITERATIONS=200,
 RESTART=20,
 !ITSOL_ABSOLUTE_TOLERANCE=  1.0000000000000000E-015,
 !ITSOL_RELATIVE_TOLERANCE=  1.0000000000000000E-010,
 ITSOL_ABSOLUTE_TOLERANCE=  1.0000000000000000E-006,
 ITSOL_RELATIVE_TOLERANCE=  1.0000000000000000E-006,
 PRECONDITIONER="ilu0",
 PRECOND_SIDE="left",
 ILU_LFIL=40,
 ILU_DROPTOL=  1.0000000000000000E-004,
 JACOBIAN="vanleer",
 /
&TIME_INTEGRATION
 TIME_INTEGRATOR="implicit",
 TIME_ACCURATE_SIM=F,
 N_NONLINEAR_ITERATIONS=100000,
 CONVERGENCE_TOLERANCE=  1.0000000000000000E-008,
 RELATIVE_RESIDUAL=T,
 FIRST_ORDER_LHS=F,
 RAMP_ORDER=F,
 RAMP_ORDER_TOLERANCE=  1.0000000000000000E-005,
 RK_STEPS=0,
 USE_EXACT_JACOBIAN=F,
 CFL_INIT=  0.001     ,
 ! CFL_MIN - potentially useful if you want to use RDM
 !           (will prevent the time step from getting too small)
 CFL_MIN=  1.0e-2,
 CFL_MAX=  1000     ,
 START_CFL_ADVANCE_ITER=5,
 ! New CFL advance scheme
 ! number of steps in 'N_CFL_LIST'
 ! iteration to apply at each step in 'CFL_LIST_ITER'
 ! CFL value to apply at each step in 'CFL_LIST_VAL'
 ! Note: You can also use this with the 'cfl.dat' file
 !       1st line is number of steps (N_CFL_LIST)
 !       Following lines are <iteration> and <value>
 !       e.g.:
 !       3
 !       10 100.0
 !       20 120.0
 !       50 75.0
 CFL_ADVANCE_SCHEME="list",
 RAMP_END_ITER= 1000    ,
 RAMP_END_CFL= 1.25   ,
 N_CFL_LIST=7,
 CFL_LIST_ITER=  69, 115, 220, 270, 420, 1000, 1600,
 CFL_LIST_VAL= 0.01, 0.1, 0.4, 0.8,   2,    4,    8,
 EXPUR_OMEGA_MIN=  1.0000000000000000E-002,
 EXPUR_BETA=  1.0500000000000000     ,
 EXPUR_KAPPA= 0.10000000000000001     ,
 RDM_BETA=  2.0000000000000000     ,
 PRESCRIBED_DT=F,
 DT_SET=  1.0000000000000000     ,
 GLOBAL_TIME_STEPPING=F,
 CHECK_SOLN_TOLERANCE=  9.9999999999999995E-007,
 REJECT_LOCAL_UPDATE=F,
 NEWTON_ITER_MAX=20         ,
 NEWTON_ITER_TOLER=  9.9999999999999995E-013,
 NEWTON_KAPPA=  5.0000000000000003E-002,
 /
&FLOW_INIT
 USE_MACH_INIT=T,
 MACH_INIT=  7.11     ,
 VMAG_INIT=  1274.8     ,
 P_INIT=  555.8489     ,
 T_INIT=  80     ,
 ALPHA_INIT= 0.0000000000000000     ,
 BETA_INIT=  0.0000000000000000     ,
 /
&BC
 BC_ORDER=2          ,
 /
&TECPLOT_IO
 PRIM_PRINT=T,
 SOURCE_PRINT=F,
 RESID_PRINT=F,
 LIM_PRINT=F,
 PRINT_GHOST_CELLS=F,
 OUTPUT_SURFACE_SHEAR_VEC=T,
 FORCE_DIMENSIONAL_OUTPUT=F,
 ! Adds a logical mask to the soln output file (true where a nonphysical solution was identified)
 ! Note: due to how the solution is updated, the printed solution values will still be physical,
 !       but you can use this functionality to locate the problematic cells
 ! Note2: Best used for debugging only, as it will append a new solution time for each iteration
 !        where the nonphysical check is triggered
 NONPHYSICAL_PRINT=F,
 /
